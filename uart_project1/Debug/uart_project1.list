
uart_project1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000025c  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000420  08000428  00010428  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000420  08000420  00010428  2**0
                  CONTENTS
  4 .ARM          00000000  08000420  08000420  00010428  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000420  08000428  00010428  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000420  08000420  00010420  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000424  08000424  00010424  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010428  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  08000428  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  08000428  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010428  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00010458  2**0
                  CONTENTS, READONLY
 13 .debug_info   000007bc  00000000  00000000  0001049b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000028f  00000000  00000000  00010c57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000090  00000000  00000000  00010ee8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000005e  00000000  00000000  00010f78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001979c  00000000  00000000  00010fd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000d70  00000000  00000000  0002a772  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008e8b0  00000000  00000000  0002b4e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000013c  00000000  00000000  000b9d94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  000b9ed0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000000 	.word	0x20000000
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000408 	.word	0x08000408

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000004 	.word	0x20000004
 8000200:	08000408 	.word	0x08000408

08000204 <main>:
#include "uart.h"

char key;

int main(void)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	af00      	add	r7, sp, #0
	
	uart_config();
 8000208:	f000 f85a 	bl	80002c0 <uart_config>
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 800020c:	4b11      	ldr	r3, [pc, #68]	; (8000254 <main+0x50>)
 800020e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000210:	4a10      	ldr	r2, [pc, #64]	; (8000254 <main+0x50>)
 8000212:	f043 0301 	orr.w	r3, r3, #1
 8000216:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOA->MODER |= GPIO_MODER_MODE5_0;
 8000218:	4b0f      	ldr	r3, [pc, #60]	; (8000258 <main+0x54>)
 800021a:	681b      	ldr	r3, [r3, #0]
 800021c:	4a0e      	ldr	r2, [pc, #56]	; (8000258 <main+0x54>)
 800021e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000222:	6013      	str	r3, [r2, #0]
	while (1)
	{
		key = uart2_read();
 8000224:	f000 f88e 	bl	8000344 <uart2_read>
 8000228:	4603      	mov	r3, r0
 800022a:	b2da      	uxtb	r2, r3
 800022c:	4b0b      	ldr	r3, [pc, #44]	; (800025c <main+0x58>)
 800022e:	701a      	strb	r2, [r3, #0]
		if(key=='1')
 8000230:	4b0a      	ldr	r3, [pc, #40]	; (800025c <main+0x58>)
 8000232:	781b      	ldrb	r3, [r3, #0]
 8000234:	2b31      	cmp	r3, #49	; 0x31
 8000236:	d106      	bne.n	8000246 <main+0x42>
		{
			GPIOA->ODR |= GPIO_ODR_OD5;
 8000238:	4b07      	ldr	r3, [pc, #28]	; (8000258 <main+0x54>)
 800023a:	695b      	ldr	r3, [r3, #20]
 800023c:	4a06      	ldr	r2, [pc, #24]	; (8000258 <main+0x54>)
 800023e:	f043 0320 	orr.w	r3, r3, #32
 8000242:	6153      	str	r3, [r2, #20]
 8000244:	e7ee      	b.n	8000224 <main+0x20>
		}
		else
		{
			GPIOA->ODR &= ~GPIO_ODR_OD5;
 8000246:	4b04      	ldr	r3, [pc, #16]	; (8000258 <main+0x54>)
 8000248:	695b      	ldr	r3, [r3, #20]
 800024a:	4a03      	ldr	r2, [pc, #12]	; (8000258 <main+0x54>)
 800024c:	f023 0320 	bic.w	r3, r3, #32
 8000250:	6153      	str	r3, [r2, #20]
	{
 8000252:	e7e7      	b.n	8000224 <main+0x20>
 8000254:	40023800 	.word	0x40023800
 8000258:	40020000 	.word	0x40020000
 800025c:	2000001c 	.word	0x2000001c

08000260 <compute_uart_baudrate>:
#define SYS_FREQ 16000000U
#define APB1_CLK SYS_FREQ
#define USART_BAUDRATE 115200

static uint16_t compute_uart_baudrate(uint32_t PeriphClk, uint32_t baudrate)
{
 8000260:	b480      	push	{r7}
 8000262:	b083      	sub	sp, #12
 8000264:	af00      	add	r7, sp, #0
 8000266:	6078      	str	r0, [r7, #4]
 8000268:	6039      	str	r1, [r7, #0]
	return((PeriphClk + (baudrate/2))/baudrate);
 800026a:	683b      	ldr	r3, [r7, #0]
 800026c:	085a      	lsrs	r2, r3, #1
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	441a      	add	r2, r3
 8000272:	683b      	ldr	r3, [r7, #0]
 8000274:	fbb2 f3f3 	udiv	r3, r2, r3
 8000278:	b29b      	uxth	r3, r3
}
 800027a:	4618      	mov	r0, r3
 800027c:	370c      	adds	r7, #12
 800027e:	46bd      	mov	sp, r7
 8000280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000284:	4770      	bx	lr
	...

08000288 <uart_set_baudrate>:

static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t baudrate)
{
 8000288:	b580      	push	{r7, lr}
 800028a:	b084      	sub	sp, #16
 800028c:	af00      	add	r7, sp, #0
 800028e:	60f8      	str	r0, [r7, #12]
 8000290:	60b9      	str	r1, [r7, #8]
 8000292:	607a      	str	r2, [r7, #4]
	USART2->BRR |= compute_uart_baudrate(APB1_CLK, USART_BAUDRATE);
 8000294:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8000298:	4807      	ldr	r0, [pc, #28]	; (80002b8 <uart_set_baudrate+0x30>)
 800029a:	f7ff ffe1 	bl	8000260 <compute_uart_baudrate>
 800029e:	4603      	mov	r3, r0
 80002a0:	461a      	mov	r2, r3
 80002a2:	4b06      	ldr	r3, [pc, #24]	; (80002bc <uart_set_baudrate+0x34>)
 80002a4:	689b      	ldr	r3, [r3, #8]
 80002a6:	4611      	mov	r1, r2
 80002a8:	4a04      	ldr	r2, [pc, #16]	; (80002bc <uart_set_baudrate+0x34>)
 80002aa:	430b      	orrs	r3, r1
 80002ac:	6093      	str	r3, [r2, #8]
}
 80002ae:	bf00      	nop
 80002b0:	3710      	adds	r7, #16
 80002b2:	46bd      	mov	sp, r7
 80002b4:	bd80      	pop	{r7, pc}
 80002b6:	bf00      	nop
 80002b8:	00f42400 	.word	0x00f42400
 80002bc:	40004400 	.word	0x40004400

080002c0 <uart_config>:

void uart_config(void)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 80002c4:	4b1b      	ldr	r3, [pc, #108]	; (8000334 <uart_config+0x74>)
 80002c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002c8:	4a1a      	ldr	r2, [pc, #104]	; (8000334 <uart_config+0x74>)
 80002ca:	f043 0301 	orr.w	r3, r3, #1
 80002ce:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOA->MODER |= (GPIO_MODER_MODE2_1);
 80002d0:	4b19      	ldr	r3, [pc, #100]	; (8000338 <uart_config+0x78>)
 80002d2:	681b      	ldr	r3, [r3, #0]
 80002d4:	4a18      	ldr	r2, [pc, #96]	; (8000338 <uart_config+0x78>)
 80002d6:	f043 0320 	orr.w	r3, r3, #32
 80002da:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (GPIO_MODER_MODE3_1);
 80002dc:	4b16      	ldr	r3, [pc, #88]	; (8000338 <uart_config+0x78>)
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	4a15      	ldr	r2, [pc, #84]	; (8000338 <uart_config+0x78>)
 80002e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002e6:	6013      	str	r3, [r2, #0]
	GPIOA->AFR[0] |= ~(GPIO_AFRL_AFRL2_3);
 80002e8:	4b13      	ldr	r3, [pc, #76]	; (8000338 <uart_config+0x78>)
 80002ea:	6a1b      	ldr	r3, [r3, #32]
 80002ec:	4a12      	ldr	r2, [pc, #72]	; (8000338 <uart_config+0x78>)
 80002ee:	f463 6300 	orn	r3, r3, #2048	; 0x800
 80002f2:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= ~(GPIO_AFRL_AFRL3_3);
 80002f4:	4b10      	ldr	r3, [pc, #64]	; (8000338 <uart_config+0x78>)
 80002f6:	6a1b      	ldr	r3, [r3, #32]
 80002f8:	4a0f      	ldr	r2, [pc, #60]	; (8000338 <uart_config+0x78>)
 80002fa:	f463 4300 	orn	r3, r3, #32768	; 0x8000
 80002fe:	6213      	str	r3, [r2, #32]
	RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 8000300:	4b0c      	ldr	r3, [pc, #48]	; (8000334 <uart_config+0x74>)
 8000302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000304:	4a0b      	ldr	r2, [pc, #44]	; (8000334 <uart_config+0x74>)
 8000306:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800030a:	6413      	str	r3, [r2, #64]	; 0x40
	uart_set_baudrate(USART2, SYS_FREQ, USART_BAUDRATE);
 800030c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000310:	490a      	ldr	r1, [pc, #40]	; (800033c <uart_config+0x7c>)
 8000312:	480b      	ldr	r0, [pc, #44]	; (8000340 <uart_config+0x80>)
 8000314:	f7ff ffb8 	bl	8000288 <uart_set_baudrate>
	USART2->CR1 = USART_CR1_TE;
 8000318:	4b09      	ldr	r3, [pc, #36]	; (8000340 <uart_config+0x80>)
 800031a:	2208      	movs	r2, #8
 800031c:	60da      	str	r2, [r3, #12]
	USART2->CR1 = USART_CR1_RE;
 800031e:	4b08      	ldr	r3, [pc, #32]	; (8000340 <uart_config+0x80>)
 8000320:	2204      	movs	r2, #4
 8000322:	60da      	str	r2, [r3, #12]
	USART2->CR1 |= USART_CR1_UE;
 8000324:	4b06      	ldr	r3, [pc, #24]	; (8000340 <uart_config+0x80>)
 8000326:	68db      	ldr	r3, [r3, #12]
 8000328:	4a05      	ldr	r2, [pc, #20]	; (8000340 <uart_config+0x80>)
 800032a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800032e:	60d3      	str	r3, [r2, #12]
}
 8000330:	bf00      	nop
 8000332:	bd80      	pop	{r7, pc}
 8000334:	40023800 	.word	0x40023800
 8000338:	40020000 	.word	0x40020000
 800033c:	00f42400 	.word	0x00f42400
 8000340:	40004400 	.word	0x40004400

08000344 <uart2_read>:
	while(!((USART2->SR)&USART_SR_TXE));
	USART2->DR = (ch & 0xFF);
}

char uart2_read(void)
{
 8000344:	b480      	push	{r7}
 8000346:	af00      	add	r7, sp, #0
	while (!((USART2->SR) & USART_SR_RXNE));
 8000348:	bf00      	nop
 800034a:	4b07      	ldr	r3, [pc, #28]	; (8000368 <uart2_read+0x24>)
 800034c:	681b      	ldr	r3, [r3, #0]
 800034e:	f003 0320 	and.w	r3, r3, #32
 8000352:	2b00      	cmp	r3, #0
 8000354:	d0f9      	beq.n	800034a <uart2_read+0x6>
	return USART2->DR;
 8000356:	4b04      	ldr	r3, [pc, #16]	; (8000368 <uart2_read+0x24>)
 8000358:	685b      	ldr	r3, [r3, #4]
 800035a:	b2db      	uxtb	r3, r3
}
 800035c:	4618      	mov	r0, r3
 800035e:	46bd      	mov	sp, r7
 8000360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000364:	4770      	bx	lr
 8000366:	bf00      	nop
 8000368:	40004400 	.word	0x40004400

0800036c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800036c:	480d      	ldr	r0, [pc, #52]	; (80003a4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800036e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000370:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000374:	480c      	ldr	r0, [pc, #48]	; (80003a8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000376:	490d      	ldr	r1, [pc, #52]	; (80003ac <LoopForever+0xa>)
  ldr r2, =_sidata
 8000378:	4a0d      	ldr	r2, [pc, #52]	; (80003b0 <LoopForever+0xe>)
  movs r3, #0
 800037a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800037c:	e002      	b.n	8000384 <LoopCopyDataInit>

0800037e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800037e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000380:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000382:	3304      	adds	r3, #4

08000384 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000384:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000386:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000388:	d3f9      	bcc.n	800037e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800038a:	4a0a      	ldr	r2, [pc, #40]	; (80003b4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800038c:	4c0a      	ldr	r4, [pc, #40]	; (80003b8 <LoopForever+0x16>)
  movs r3, #0
 800038e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000390:	e001      	b.n	8000396 <LoopFillZerobss>

08000392 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000392:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000394:	3204      	adds	r2, #4

08000396 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000396:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000398:	d3fb      	bcc.n	8000392 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800039a:	f000 f811 	bl	80003c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800039e:	f7ff ff31 	bl	8000204 <main>

080003a2 <LoopForever>:

LoopForever:
  b LoopForever
 80003a2:	e7fe      	b.n	80003a2 <LoopForever>
  ldr   r0, =_estack
 80003a4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80003a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003ac:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80003b0:	08000428 	.word	0x08000428
  ldr r2, =_sbss
 80003b4:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80003b8:	20000020 	.word	0x20000020

080003bc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003bc:	e7fe      	b.n	80003bc <ADC_IRQHandler>
	...

080003c0 <__libc_init_array>:
 80003c0:	b570      	push	{r4, r5, r6, lr}
 80003c2:	4d0d      	ldr	r5, [pc, #52]	; (80003f8 <__libc_init_array+0x38>)
 80003c4:	4c0d      	ldr	r4, [pc, #52]	; (80003fc <__libc_init_array+0x3c>)
 80003c6:	1b64      	subs	r4, r4, r5
 80003c8:	10a4      	asrs	r4, r4, #2
 80003ca:	2600      	movs	r6, #0
 80003cc:	42a6      	cmp	r6, r4
 80003ce:	d109      	bne.n	80003e4 <__libc_init_array+0x24>
 80003d0:	4d0b      	ldr	r5, [pc, #44]	; (8000400 <__libc_init_array+0x40>)
 80003d2:	4c0c      	ldr	r4, [pc, #48]	; (8000404 <__libc_init_array+0x44>)
 80003d4:	f000 f818 	bl	8000408 <_init>
 80003d8:	1b64      	subs	r4, r4, r5
 80003da:	10a4      	asrs	r4, r4, #2
 80003dc:	2600      	movs	r6, #0
 80003de:	42a6      	cmp	r6, r4
 80003e0:	d105      	bne.n	80003ee <__libc_init_array+0x2e>
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80003e8:	4798      	blx	r3
 80003ea:	3601      	adds	r6, #1
 80003ec:	e7ee      	b.n	80003cc <__libc_init_array+0xc>
 80003ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80003f2:	4798      	blx	r3
 80003f4:	3601      	adds	r6, #1
 80003f6:	e7f2      	b.n	80003de <__libc_init_array+0x1e>
 80003f8:	08000420 	.word	0x08000420
 80003fc:	08000420 	.word	0x08000420
 8000400:	08000420 	.word	0x08000420
 8000404:	08000424 	.word	0x08000424

08000408 <_init>:
 8000408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800040a:	bf00      	nop
 800040c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800040e:	bc08      	pop	{r3}
 8000410:	469e      	mov	lr, r3
 8000412:	4770      	bx	lr

08000414 <_fini>:
 8000414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000416:	bf00      	nop
 8000418:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800041a:	bc08      	pop	{r3}
 800041c:	469e      	mov	lr, r3
 800041e:	4770      	bx	lr
