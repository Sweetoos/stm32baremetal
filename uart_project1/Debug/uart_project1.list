
uart_project1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000270  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000434  0800043c  0001043c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000434  08000434  0001043c  2**0
                  CONTENTS
  4 .ARM          00000000  08000434  08000434  0001043c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000434  0800043c  0001043c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000434  08000434  00010434  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000438  08000438  00010438  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  0001043c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  0800043c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  0800043c  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001043c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000068a  00000000  00000000  0001046c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000027a  00000000  00000000  00010af6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000098  00000000  00000000  00010d70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000070  00000000  00000000  00010e08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000199f8  00000000  00000000  00010e78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000ef1  00000000  00000000  0002a870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ee5f  00000000  00000000  0002b761  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ba5c0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000160  00000000  00000000  000ba610  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000000 	.word	0x20000000
 80001e0:	00000000 	.word	0x00000000
 80001e4:	0800041c 	.word	0x0800041c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000004 	.word	0x20000004
 8000200:	0800041c 	.word	0x0800041c

08000204 <main>:
#include "uart.h"



int main(void)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	b082      	sub	sp, #8
 8000208:	af00      	add	r7, sp, #0
	char key;
	uart_config();
 800020a:	f000 f84b 	bl	80002a4 <uart_config>
	led_config();
 800020e:	f000 f88b 	bl	8000328 <led_config>
	while (1)
	{
		key = uart2_read();
 8000212:	f000 f8a1 	bl	8000358 <uart2_read>
 8000216:	4603      	mov	r3, r0
 8000218:	71fb      	strb	r3, [r7, #7]
		if (key == '1')
 800021a:	79fb      	ldrb	r3, [r7, #7]
 800021c:	2b31      	cmp	r3, #49	; 0x31
 800021e:	d105      	bne.n	800022c <main+0x28>
		{
			LD2_ON;
 8000220:	4b07      	ldr	r3, [pc, #28]	; (8000240 <main+0x3c>)
 8000222:	695b      	ldr	r3, [r3, #20]
 8000224:	4a06      	ldr	r2, [pc, #24]	; (8000240 <main+0x3c>)
 8000226:	f043 0320 	orr.w	r3, r3, #32
 800022a:	6153      	str	r3, [r2, #20]
		}
		if (key == '2')
 800022c:	79fb      	ldrb	r3, [r7, #7]
 800022e:	2b32      	cmp	r3, #50	; 0x32
 8000230:	d1ef      	bne.n	8000212 <main+0xe>
		{
			LD2_OFF;
 8000232:	4b03      	ldr	r3, [pc, #12]	; (8000240 <main+0x3c>)
 8000234:	695b      	ldr	r3, [r3, #20]
 8000236:	4a02      	ldr	r2, [pc, #8]	; (8000240 <main+0x3c>)
 8000238:	f023 0320 	bic.w	r3, r3, #32
 800023c:	6153      	str	r3, [r2, #20]
		key = uart2_read();
 800023e:	e7e8      	b.n	8000212 <main+0xe>
 8000240:	40020000 	.word	0x40020000

08000244 <compute_uart_baudrate>:
#define APB1_CLK SYS_FREQ
#define USART_BAUDRATE 115200


static uint16_t compute_uart_baudrate(uint32_t PeriphClk, uint32_t baudrate)
{
 8000244:	b480      	push	{r7}
 8000246:	b083      	sub	sp, #12
 8000248:	af00      	add	r7, sp, #0
 800024a:	6078      	str	r0, [r7, #4]
 800024c:	6039      	str	r1, [r7, #0]
	return((PeriphClk + (baudrate/2))/baudrate);
 800024e:	683b      	ldr	r3, [r7, #0]
 8000250:	085a      	lsrs	r2, r3, #1
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	441a      	add	r2, r3
 8000256:	683b      	ldr	r3, [r7, #0]
 8000258:	fbb2 f3f3 	udiv	r3, r2, r3
 800025c:	b29b      	uxth	r3, r3
}
 800025e:	4618      	mov	r0, r3
 8000260:	370c      	adds	r7, #12
 8000262:	46bd      	mov	sp, r7
 8000264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000268:	4770      	bx	lr
	...

0800026c <uart_set_baudrate>:

static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t baudrate)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	b084      	sub	sp, #16
 8000270:	af00      	add	r7, sp, #0
 8000272:	60f8      	str	r0, [r7, #12]
 8000274:	60b9      	str	r1, [r7, #8]
 8000276:	607a      	str	r2, [r7, #4]
	USART2->BRR |= compute_uart_baudrate(APB1_CLK, USART_BAUDRATE);
 8000278:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 800027c:	4807      	ldr	r0, [pc, #28]	; (800029c <uart_set_baudrate+0x30>)
 800027e:	f7ff ffe1 	bl	8000244 <compute_uart_baudrate>
 8000282:	4603      	mov	r3, r0
 8000284:	461a      	mov	r2, r3
 8000286:	4b06      	ldr	r3, [pc, #24]	; (80002a0 <uart_set_baudrate+0x34>)
 8000288:	689b      	ldr	r3, [r3, #8]
 800028a:	4611      	mov	r1, r2
 800028c:	4a04      	ldr	r2, [pc, #16]	; (80002a0 <uart_set_baudrate+0x34>)
 800028e:	430b      	orrs	r3, r1
 8000290:	6093      	str	r3, [r2, #8]
}
 8000292:	bf00      	nop
 8000294:	3710      	adds	r7, #16
 8000296:	46bd      	mov	sp, r7
 8000298:	bd80      	pop	{r7, pc}
 800029a:	bf00      	nop
 800029c:	00f42400 	.word	0x00f42400
 80002a0:	40004400 	.word	0x40004400

080002a4 <uart_config>:

void uart_config(void)
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 80002a8:	4b1b      	ldr	r3, [pc, #108]	; (8000318 <uart_config+0x74>)
 80002aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002ac:	4a1a      	ldr	r2, [pc, #104]	; (8000318 <uart_config+0x74>)
 80002ae:	f043 0301 	orr.w	r3, r3, #1
 80002b2:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOA->MODER |= (GPIO_MODER_MODE2_1);
 80002b4:	4b19      	ldr	r3, [pc, #100]	; (800031c <uart_config+0x78>)
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	4a18      	ldr	r2, [pc, #96]	; (800031c <uart_config+0x78>)
 80002ba:	f043 0320 	orr.w	r3, r3, #32
 80002be:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (GPIO_MODER_MODE3_1);
 80002c0:	4b16      	ldr	r3, [pc, #88]	; (800031c <uart_config+0x78>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	4a15      	ldr	r2, [pc, #84]	; (800031c <uart_config+0x78>)
 80002c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002ca:	6013      	str	r3, [r2, #0]
	GPIOA->AFR[0] |= ~(GPIO_AFRL_AFRL2_3);
 80002cc:	4b13      	ldr	r3, [pc, #76]	; (800031c <uart_config+0x78>)
 80002ce:	6a1b      	ldr	r3, [r3, #32]
 80002d0:	4a12      	ldr	r2, [pc, #72]	; (800031c <uart_config+0x78>)
 80002d2:	f463 6300 	orn	r3, r3, #2048	; 0x800
 80002d6:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~(GPIO_AFRL_AFRL3_3);
 80002d8:	4b10      	ldr	r3, [pc, #64]	; (800031c <uart_config+0x78>)
 80002da:	6a1b      	ldr	r3, [r3, #32]
 80002dc:	4a0f      	ldr	r2, [pc, #60]	; (800031c <uart_config+0x78>)
 80002de:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80002e2:	6213      	str	r3, [r2, #32]
	RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 80002e4:	4b0c      	ldr	r3, [pc, #48]	; (8000318 <uart_config+0x74>)
 80002e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80002e8:	4a0b      	ldr	r2, [pc, #44]	; (8000318 <uart_config+0x74>)
 80002ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80002ee:	6413      	str	r3, [r2, #64]	; 0x40
	uart_set_baudrate(USART2, SYS_FREQ, USART_BAUDRATE);
 80002f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80002f4:	490a      	ldr	r1, [pc, #40]	; (8000320 <uart_config+0x7c>)
 80002f6:	480b      	ldr	r0, [pc, #44]	; (8000324 <uart_config+0x80>)
 80002f8:	f7ff ffb8 	bl	800026c <uart_set_baudrate>
	USART2->CR1 = USART_CR1_TE;
 80002fc:	4b09      	ldr	r3, [pc, #36]	; (8000324 <uart_config+0x80>)
 80002fe:	2208      	movs	r2, #8
 8000300:	60da      	str	r2, [r3, #12]
	USART2->CR1 = USART_CR1_RE;
 8000302:	4b08      	ldr	r3, [pc, #32]	; (8000324 <uart_config+0x80>)
 8000304:	2204      	movs	r2, #4
 8000306:	60da      	str	r2, [r3, #12]
	USART2->CR1 |= USART_CR1_UE;
 8000308:	4b06      	ldr	r3, [pc, #24]	; (8000324 <uart_config+0x80>)
 800030a:	68db      	ldr	r3, [r3, #12]
 800030c:	4a05      	ldr	r2, [pc, #20]	; (8000324 <uart_config+0x80>)
 800030e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000312:	60d3      	str	r3, [r2, #12]
}
 8000314:	bf00      	nop
 8000316:	bd80      	pop	{r7, pc}
 8000318:	40023800 	.word	0x40023800
 800031c:	40020000 	.word	0x40020000
 8000320:	00f42400 	.word	0x00f42400
 8000324:	40004400 	.word	0x40004400

08000328 <led_config>:

void led_config(void)
{
 8000328:	b480      	push	{r7}
 800032a:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 800032c:	4b08      	ldr	r3, [pc, #32]	; (8000350 <led_config+0x28>)
 800032e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000330:	4a07      	ldr	r2, [pc, #28]	; (8000350 <led_config+0x28>)
 8000332:	f043 0301 	orr.w	r3, r3, #1
 8000336:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOA->MODER |= GPIO_MODER_MODE5_0;
 8000338:	4b06      	ldr	r3, [pc, #24]	; (8000354 <led_config+0x2c>)
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	4a05      	ldr	r2, [pc, #20]	; (8000354 <led_config+0x2c>)
 800033e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000342:	6013      	str	r3, [r2, #0]
}
 8000344:	bf00      	nop
 8000346:	46bd      	mov	sp, r7
 8000348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800034c:	4770      	bx	lr
 800034e:	bf00      	nop
 8000350:	40023800 	.word	0x40023800
 8000354:	40020000 	.word	0x40020000

08000358 <uart2_read>:
	while(!((USART2->SR)&USART_SR_TXE));
	USART2->DR = (ch & 0xFF);
}

char uart2_read(void)
{
 8000358:	b480      	push	{r7}
 800035a:	af00      	add	r7, sp, #0
	while (!((USART2->SR) & USART_SR_RXNE));
 800035c:	bf00      	nop
 800035e:	4b07      	ldr	r3, [pc, #28]	; (800037c <uart2_read+0x24>)
 8000360:	681b      	ldr	r3, [r3, #0]
 8000362:	f003 0320 	and.w	r3, r3, #32
 8000366:	2b00      	cmp	r3, #0
 8000368:	d0f9      	beq.n	800035e <uart2_read+0x6>
	return USART2->DR;
 800036a:	4b04      	ldr	r3, [pc, #16]	; (800037c <uart2_read+0x24>)
 800036c:	685b      	ldr	r3, [r3, #4]
 800036e:	b2db      	uxtb	r3, r3
}
 8000370:	4618      	mov	r0, r3
 8000372:	46bd      	mov	sp, r7
 8000374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000378:	4770      	bx	lr
 800037a:	bf00      	nop
 800037c:	40004400 	.word	0x40004400

08000380 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000380:	480d      	ldr	r0, [pc, #52]	; (80003b8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000382:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000384:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000388:	480c      	ldr	r0, [pc, #48]	; (80003bc <LoopForever+0x6>)
  ldr r1, =_edata
 800038a:	490d      	ldr	r1, [pc, #52]	; (80003c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800038c:	4a0d      	ldr	r2, [pc, #52]	; (80003c4 <LoopForever+0xe>)
  movs r3, #0
 800038e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000390:	e002      	b.n	8000398 <LoopCopyDataInit>

08000392 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000392:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000394:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000396:	3304      	adds	r3, #4

08000398 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000398:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800039a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800039c:	d3f9      	bcc.n	8000392 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800039e:	4a0a      	ldr	r2, [pc, #40]	; (80003c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80003a0:	4c0a      	ldr	r4, [pc, #40]	; (80003cc <LoopForever+0x16>)
  movs r3, #0
 80003a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003a4:	e001      	b.n	80003aa <LoopFillZerobss>

080003a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003a8:	3204      	adds	r2, #4

080003aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003ac:	d3fb      	bcc.n	80003a6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003ae:	f000 f811 	bl	80003d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003b2:	f7ff ff27 	bl	8000204 <main>

080003b6 <LoopForever>:

LoopForever:
  b LoopForever
 80003b6:	e7fe      	b.n	80003b6 <LoopForever>
  ldr   r0, =_estack
 80003b8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80003bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003c0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80003c4:	0800043c 	.word	0x0800043c
  ldr r2, =_sbss
 80003c8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80003cc:	2000001c 	.word	0x2000001c

080003d0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003d0:	e7fe      	b.n	80003d0 <ADC_IRQHandler>
	...

080003d4 <__libc_init_array>:
 80003d4:	b570      	push	{r4, r5, r6, lr}
 80003d6:	4d0d      	ldr	r5, [pc, #52]	; (800040c <__libc_init_array+0x38>)
 80003d8:	4c0d      	ldr	r4, [pc, #52]	; (8000410 <__libc_init_array+0x3c>)
 80003da:	1b64      	subs	r4, r4, r5
 80003dc:	10a4      	asrs	r4, r4, #2
 80003de:	2600      	movs	r6, #0
 80003e0:	42a6      	cmp	r6, r4
 80003e2:	d109      	bne.n	80003f8 <__libc_init_array+0x24>
 80003e4:	4d0b      	ldr	r5, [pc, #44]	; (8000414 <__libc_init_array+0x40>)
 80003e6:	4c0c      	ldr	r4, [pc, #48]	; (8000418 <__libc_init_array+0x44>)
 80003e8:	f000 f818 	bl	800041c <_init>
 80003ec:	1b64      	subs	r4, r4, r5
 80003ee:	10a4      	asrs	r4, r4, #2
 80003f0:	2600      	movs	r6, #0
 80003f2:	42a6      	cmp	r6, r4
 80003f4:	d105      	bne.n	8000402 <__libc_init_array+0x2e>
 80003f6:	bd70      	pop	{r4, r5, r6, pc}
 80003f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80003fc:	4798      	blx	r3
 80003fe:	3601      	adds	r6, #1
 8000400:	e7ee      	b.n	80003e0 <__libc_init_array+0xc>
 8000402:	f855 3b04 	ldr.w	r3, [r5], #4
 8000406:	4798      	blx	r3
 8000408:	3601      	adds	r6, #1
 800040a:	e7f2      	b.n	80003f2 <__libc_init_array+0x1e>
 800040c:	08000434 	.word	0x08000434
 8000410:	08000434 	.word	0x08000434
 8000414:	08000434 	.word	0x08000434
 8000418:	08000438 	.word	0x08000438

0800041c <_init>:
 800041c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800041e:	bf00      	nop
 8000420:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000422:	bc08      	pop	{r3}
 8000424:	469e      	mov	lr, r3
 8000426:	4770      	bx	lr

08000428 <_fini>:
 8000428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800042a:	bf00      	nop
 800042c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800042e:	bc08      	pop	{r3}
 8000430:	469e      	mov	lr, r3
 8000432:	4770      	bx	lr
